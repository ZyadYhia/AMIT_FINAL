
SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aa7  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a4  00000000  00000000  00000cff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000519  00000000  00000000  000015a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00001abc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041e  00000000  00000000  00001bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000315  00000000  00000000  0000200e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002323  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    /* Replace with your application code */
	UART_PROTOCOL_init();
  6c:	0e 94 73 00 	call	0xe6	; 0xe6 <UART_PROTOCOL_init>
	SPI_PROTOCOL_init(SPI_PROTOCOL_SLAVE);
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_PROTOCOL_init>
	DDRC = 0x07;
  78:	87 e0       	ldi	r24, 0x07	; 7
  7a:	84 bb       	out	0x14, r24	; 20
    while (1) 
    {
	    char c = SPI_PROTOCOL_SLAVE_recieve();
  7c:	0e 94 6f 00 	call	0xde	; 0xde <SPI_PROTOCOL_SLAVE_recieve>
		if(c == '1'){//to open the first led
  80:	81 33       	cpi	r24, 0x31	; 49
  82:	19 f4       	brne	.+6      	; 0x8a <main+0x1e>
			PORTC |= (1<<0);
  84:	95 b3       	in	r25, 0x15	; 21
  86:	91 60       	ori	r25, 0x01	; 1
  88:	95 bb       	out	0x15, r25	; 21
		}
		if(c  == '2'){//to open the second led
  8a:	82 33       	cpi	r24, 0x32	; 50
  8c:	19 f4       	brne	.+6      	; 0x94 <main+0x28>
			PORTC |= (1<<1);
  8e:	95 b3       	in	r25, 0x15	; 21
  90:	92 60       	ori	r25, 0x02	; 2
  92:	95 bb       	out	0x15, r25	; 21
		}
		if(c == '3'){//to close the first led
  94:	83 33       	cpi	r24, 0x33	; 51
  96:	19 f4       	brne	.+6      	; 0x9e <main+0x32>
			PORTC &= ~(1<<0);
  98:	95 b3       	in	r25, 0x15	; 21
  9a:	9e 7f       	andi	r25, 0xFE	; 254
  9c:	95 bb       	out	0x15, r25	; 21
		}
		if(c  == '4'){//to close the second led
  9e:	84 33       	cpi	r24, 0x34	; 52
  a0:	19 f4       	brne	.+6      	; 0xa8 <main+0x3c>
			PORTC &= ~(1<<1);
  a2:	95 b3       	in	r25, 0x15	; 21
  a4:	9d 7f       	andi	r25, 0xFD	; 253
  a6:	95 bb       	out	0x15, r25	; 21
		}
		if(c  == '5'){//to close the second led
  a8:	85 33       	cpi	r24, 0x35	; 53
  aa:	19 f4       	brne	.+6      	; 0xb2 <main+0x46>
			PORTC |= (1<<2);
  ac:	95 b3       	in	r25, 0x15	; 21
  ae:	94 60       	ori	r25, 0x04	; 4
  b0:	95 bb       	out	0x15, r25	; 21
		}
		if(c  == '6'){//to close the second led
  b2:	86 33       	cpi	r24, 0x36	; 54
  b4:	19 f7       	brne	.-58     	; 0x7c <main+0x10>
			PORTC &= ~(1<<2);
  b6:	85 b3       	in	r24, 0x15	; 21
  b8:	8b 7f       	andi	r24, 0xFB	; 251
  ba:	85 bb       	out	0x15, r24	; 21
  bc:	df cf       	rjmp	.-66     	; 0x7c <main+0x10>

000000be <SPI_PROTOCOL_init>:
	  Sending numbers over SPI
	*/
	char str[10];
	itoa(n,str,10);
	SPI_PROTOCOL_MASTER_send_str(str);
}
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	39 f4       	brne	.+14     	; 0xd0 <SPI_PROTOCOL_init+0x12>
  c2:	87 b3       	in	r24, 0x17	; 23
  c4:	80 6b       	ori	r24, 0xB0	; 176
  c6:	87 bb       	out	0x17, r24	; 23
  c8:	8d b1       	in	r24, 0x0d	; 13
  ca:	80 61       	ori	r24, 0x10	; 16
  cc:	8d b9       	out	0x0d, r24	; 13
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <SPI_PROTOCOL_init+0x18>
  d0:	87 b3       	in	r24, 0x17	; 23
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	87 bb       	out	0x17, r24	; 23
  d6:	8d b1       	in	r24, 0x0d	; 13
  d8:	83 64       	ori	r24, 0x43	; 67
  da:	8d b9       	out	0x0d, r24	; 13
  dc:	08 95       	ret

000000de <SPI_PROTOCOL_SLAVE_recieve>:
char SPI_PROTOCOL_SLAVE_recieve(){
	/*
	  This function receives data over SPI
	*/
	while(!(SPSR &(1<<SPIF)));//pooling while transmission complete 
  de:	77 9b       	sbis	0x0e, 7	; 14
  e0:	fe cf       	rjmp	.-4      	; 0xde <SPI_PROTOCOL_SLAVE_recieve>
	return  SPDR;
  e2:	8f b1       	in	r24, 0x0f	; 15
	
}
  e4:	08 95       	ret

000000e6 <UART_PROTOCOL_init>:
 
void UART_PROTOCOL_init(){
	/*
	  Initiating the UART and set the BaudRate
	*/
	UCSRB |= (1<<TXEN)|(1<<RXEN)|(1<<RXCIE);
  e6:	8a b1       	in	r24, 0x0a	; 10
  e8:	88 69       	ori	r24, 0x98	; 152
  ea:	8a b9       	out	0x0a, r24	; 10
	UBRRL  = 103;
  ec:	87 e6       	ldi	r24, 0x67	; 103
  ee:	89 b9       	out	0x09, r24	; 9
  f0:	08 95       	ret

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
